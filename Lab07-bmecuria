# Author: Binalfew
# !/usr/bin/python
import math


# ==========================================================================
# YOUR SUBMISSION GOES HERE

# Define  an Account class
class Account:
    # protected class variables
    name = ""   # Account holder name
    balance = 0.0  # starting balance
    transactionCounter = 0   # Transaction

    # A constructor (__init__) that accepts name and balance
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance

    # Define deposit method
    # Increment amount, transaction count and return current balance
    def deposit(self, amount):
        self.balance += amount   # increase balance
        self.transactionCounter += 1  # increment transaction counter
        return self.balance  # Return balance

    # Define Withdraw method
    # If the amount is less than or equal the balance subtract amount from balance
    # and increment transaction count
    # Otherwise return false and don't increase transaction count
    def withdraw(self, amount):
        if self.balance >= amount:  # If the balance is greater than the amount, subtract amount from balance
            self.balance -= amount  # subtract amount from balance
            self.transactionCounter += 1  # increment transaction
            return self.balance  # return the new balance
        else:
            return False  # false will be returned if balance is less than amount

    # Method to return transaction count
    def __len__(self):
        return self.transactionCounter

    # Method to return account holder's name
    def __str__(self):
        return self.name

    # compare the balance in both accounts and return True if they are equal, False if they are not equal
    def __eq__(self, other):
        if self.balance.__eq__(other.balance):
            return True
        else:
            return False


#  Define a CreditAccount class that inherits from Account class


class CreditAccount(Account):
    # Private member variables
    limit = 0
    rate = 0

    # Constructor
    def __init__(self, name):
        Account.__init__(self, name, 0)
        self.limit = 1000.00  # limit set at 1000.00
        self.rate = 1.24  # rate set at 1.24

    # Override deposit method
    def deposit(self, amount):
        if (amount > self.balance):
            self.balance = 0.0
            self.transactionCounter += 1
            return self.balance
        else:
            self.balance -= amount
            return self.balance

    #  override withdraw  method
    def withdraw(self, amount):
        if amount + self.balance < self.limit:
            self.balance += (amount * self.rate)
            self.transactionCounter += 1
            return self.balance
        else:
            return False

    #  Define a SavingsAccount class


class SavingsAccount(Account):
    # Override deposit method
    def deposit(self, amt):
        self.balance += (amt * 1.05)
        self.transactionCounter += 1
        return self.balance  # return new balance

    #  define a function called accrue that does't take an argument
    def accrue(self):
        self.balance *= 1.05  # multiply the balance bt 1.5
        return self.balance  # Return the new balance


# ==========================================================================

## DO NOT MODIFY BEYOND THIS POINT!
## Submissions with modifications beyond this line will be given a 0 score
## We will check... we have the technology :-)
if __name__ == "__main__":
    myScore = 0

# Test base account
acct = Account('Chelsey', 1024.32)

# test withdraw method overdraft
if acct.withdraw(100000.00) == False:
    myScore += 5
else:
    print("ERROR: Account.withdraw(ammount) did not return False.")

# Test withdraw method balance OK
if acct.withdraw(60.01) == 964.31:
    myScore += 5
else:
    print("ERROR: Value returned when attempting to make a withdrawal was unexpected")

# test deposit function
if acct.deposit(36.50) == 1000.81:
    myScore += 5
else:
    print("ERROR: The deposit function on Account class returned an unexpected value")

# test transaction counter
if len(acct) == 2:
    myScore += 5
else:
    print("ERROR: The transaction counter returned an unexpected result when using len()")

# Check toString()
if str(acct) == 'Chelsey':
    myScore += 5
else:
    print("ERROR: Converting Account to a string had an unexpected resule")

# Test equivilance operator
acct2 = Account('Sam', 1000.81)
if acct == acct2:
    myScore += 5
else:
    print("ERROR: Equivilance op test #1 failed")
acct2.withdraw(1000.00)
if acct == acct2:
    print("ERROR: Equivilance op test #2 failed")
else:
    myScore += 5

# Test the CreditAccount class
acct = CreditAccount('Chelsey')

# Test inherited methods
if str(acct) == 'Chelsey':
    myScore += 5
else:
    print("ERROR: When testing inherited methods for CreditAccount")

# Test withdraw function
if acct.withdraw(100000.00) == False:
    myScore += 5
else:
    print("ERROR: CreditAccount.withdraw did not return expected false")
if acct.withdraw(100.00) == 124.00:
    myScore += 5
else:
    print("ERROR: CreditAccount.withdraw returned unexpected result")

# test deposit function
if acct.deposit(100.00) == 24.00:
    myScore += 5
else:
    print("ERROR: CreditAccount.deposit returned unexpected result")

# test transaction counter
if len(acct) == 1:
    myScore += 5
else:
    print("ERROR: CreditAccount length was incorrect")

# test SavingsAccount
acct1 = SavingsAccount('Hannah', 36.30)
acct2 = SavingsAccount('Andrew', 156.33)
if acct1.deposit(100.00) == 141.30:
    myScore += 5
else:
    print("ERROR: deposit for savings account had unexpected return")

# test accrue
if acct1.accrue() == 148.365:
    myScore += 5
else:
    print("ERROR: deposit for savings account had unexpected return")
print("Grading complete: your score is %d out of 70" % (myScore))
